See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 5 warnings)
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (5 warnings)
Checkstyle:   FAILED (0 errors, 34 warnings)

Correctness:  41/45 tests passed
Memory:       111/134 tests passed
Timing:       115/193 tests passed

Aggregate score: 79.87%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 11K Jun 12 09:48 Deque.java
 808 Jun 12 09:48 Permutation.java
4.0K Jun 12 09:48 RandomizedQueue.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------
Deque.java:24: warning: [unchecked] unchecked cast
        deque = (Item[]) new Object[length];
                         ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class Deque
Deque.java:33: warning: [unchecked] unchecked cast
        Item[] newDeque = (Item[]) new Object[dim];
                                   ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class Deque
2 warnings

% javac RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:17: warning: [unchecked] unchecked cast
        randQueue = (Item[]) new Object[2];
                             ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:21: warning: [unchecked] unchecked cast
        Item newRandQueue[] = (Item[]) new Object[dim];
                                       ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:78: warning: [unchecked] unchecked cast
        Item[] copy = (Item[]) new Object[count];
                               ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
3 warnings

% javac Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'arrayCpy()' is never called.  At RandomizedQueue.java:[lines 78-83]


================================================================


% pmd .
*-----------------------------------------------------------
Deque.java:14: Can you replace the instance (or static) variable 'tmp' with a local variable? [SingularField]
Deque.java:15: Can you replace the instance (or static) variable 'resetL' with a local variable? [SingularField]
Deque.java:16: Can you replace the instance (or static) variable 'resetR' with a local variable? [SingularField]
RandomizedQueue.java:11: Can you replace the instance (or static) variable 'retItem' with a local variable? [SingularField]
RandomizedQueue.java:12: Can you replace the instance (or static) variable 'tmpIndex' with a local variable? [SingularField]
PMD ends with 5 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Deque.java:2:8: Unused import statement for 'edu.princeton.cs.algs4.StdIn'. [UnusedImports]
[WARN] Deque.java:117:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:131:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Permutation.java:5:43: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Permutation.java:18:9: 'while' is not followed by whitespace. [WhitespaceAround]
[WARN] Permutation.java:18:41: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Permutation.java:26:9: 'while' is not followed by whitespace. [WhitespaceAround]
[WARN] Permutation.java:26:38: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:16:29: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:20:33: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:21:26: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] RandomizedQueue.java:23:9: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:23:18: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:23:18: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:23:23: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:23:23: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:23:29: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] RandomizedQueue.java:23:34: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:24:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:33:29: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:38:22: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:43:35: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:49:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:54:26: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:63:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:70:25: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:77:30: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:80:9: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:119:43: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:126:9: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:134:9: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:137:9: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:140:9: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:148:9: 'for' is not followed by whitespace. [WhitespaceAround]
Checkstyle ends with 0 errors and 34 warnings.

% custom checkstyle checks for Deque.java
*-----------------------------------------------------------

% custom checkstyle checks for RandomizedQueue.java
*-----------------------------------------------------------

% custom checkstyle checks for Permutation.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 17 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: check random calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: check random calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 4: check random calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 5: check random calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    - failed on operation 22 of 50
    - student   removeFirst() = 21
    - reference removeFirst() = 19

  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    - failed on operation 414 of 500
    - student   removeFirst() = 413
    - reference removeFirst() = 411

  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    - failed on operation 280 of 1000
    - student   removeFirst() = 279
    - reference removeFirst() = 277

==> FAILED

Test 6: check random calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size()
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 178 of 500
    - student   removeLast() = null
    - reference removeLast() = 176

  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 5 of 1000
    - student   removeLast() = null
    - reference removeLast() = 3
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.addLast(2)
         deque.addLast(3)
         deque.removeFirst()     ==> 2
         deque.removeLast()      ==> null

==> FAILED

Test 7: check removeFirst() and removeLast() from an empty deque
  * removeFirst()
  * removeLast()
==> passed

Test 8: check whether two Deque objects can be created at the same time
  * n = 10
    - failed on call 8 to removeFirst() in first Deque
    - student   return value = null
    - reference return value = 3

  * n = 1000
    - failed on call 503 to removeFirst() in first Deque
    - student   return value = null
    - reference return value = 498

==> FAILED

Test 9: check iterator() after n calls to addFirst()
  * n = 10
  * n = 50
==> passed

Test 10: check iterator() after each of m intermixed calls to
         addFirst(), addLast(), removeFirst(), and removeLast()
  * m = 20
  * m = 50
  * m = 100
    - number of student   entries = 4
    - number of reference entries = 5
    - iterator() yields wrong entries after applying operation 21

  * m = 1000
    - number of student   entries = 27
    - number of reference entries = 28
    - iterator() yields wrong entries after applying operation 90

==> FAILED

Test 11: create two nested iterators to same deque
  * n = 10
  * n = 50
==> passed

Test 12: create two parallel iterators to same deque
==> passed

Test 13: create an iterator and check calls to next() and hasNext()
  * 10 consecutive calls to hasNext() on a deque of size 10
  * 10 consecutive calls to next() on a deque of size 10
  * 50 random intermixed calls to next() and hasNext() on a deque of size 10
  * 1000 random intermixed calls to next() and hasNext() on a deque of size 100
==> passed

Test 14: create Deque objects of different parameterized types
==> passed

Test 15: call addFirst() and addLast() with null argument
==> passed

Test 16: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 17: call iterator() when the deque is empty
==> passed


Total: 13/17 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 19 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
==> passed

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==> passed

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *   50 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *  500 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
==> passed

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
==> passed

Test 6: create multiple randomized queue objects at the same time
  * n = 10
  * n = 100
==> passed

Test 7: check that iterator() returns correct items after a sequence
        of n enqueue() operations
  * n = 10
  * n = 50
==> passed

Test 8: check that iterator() returns correct items after sequence
        of m enqueue() and dequeue() operations
  * m = 10
  * m = 1000
==> passed

Test 9: create two nested iterators over the same randomized queue
  * n = 10
  * n = 50
==> passed

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
  * n = 50
==> passed

Test 11: create two iterators over different randomized queues
==> passed

Test 12: create an iterator and check calls to next() and hasNext()
  * 10 consecutive calls to hasNext() on a deque of size 10
  * 10 consecutive calls to next() on a deque of size 10
  * 50 random intermixed calls to next() and hasNext() on a deque of size 10
  * 1000 random intermixed calls to next() and hasNext() on a deque of size 100
==> passed

Test 13: create RandomizedQueue objects of different parameterized types
==> passed

Test 14: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
  * n = 5, trials = 12000
  * n = 8, trials = 12000
  * n = 10, trials = 12000
==> passed

Test 15: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==> passed

Test 16: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==> passed

Test 17: call enqueue() with a null argument
==> passed

Test 18: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 19: call iterator() when randomized queue is empty
==> passed


Total: 19/19 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 < distinct.txt
  B
  I
  D

  % java Permutation 3 < distinct.txt
  F
  A
  E

  % java Permutation 8 < duplicates.txt
  BB
  BB
  AA
  BB
  CC
  CC
  BB
  BB

==> passed

Test 1b: check formatting for other inputs
  % java Permutation 8 < mediumTale.txt
  times
  age
  of
  age
  it
  was
  foolishness
  was

  % java Permutation 0 < distinct.txt
  [no output]

==> passed

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 3
  * filename = duplicates.txt, k = 8
  * filename = mediumTale.txt, k = 8
==> passed

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 1
  * filename = distinct.txt, k = 9
  * filename = permutation6.txt, k = 6
  * filename = permutation10.txt, k = 10
==> passed

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 6
  * filename = permutation8.txt, k = 2
  * filename = tinyTale.txt, k = 10
==> passed

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
  * filename = mediumTale.txt, k = 20
  * filename = tale.txt, k = 10
  * filename = tale.txt, k = 50
==> passed

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
  * filename = distinct.txt, k = 0
==> passed

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1
  * filename = permutation4.txt, k = 2
  * filename = permutation4.txt, k = 3
  * filename = permutation4.txt, k = 4
  * filename = permutation6.txt, k = 2
==> passed

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1
  * filename = permutation5.txt, k = 2
  * filename = permutation5.txt, k = 3
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 2
==> passed

Total: 9/9 tests passed!


================================================================
********************************************************************************
*  TIMING (substituting reference RandomizedQueue and Deque)
********************************************************************************

Timing Permutation
*-----------------------------------------------------------
Running 23 total tests.

Test 1: count calls to methods in StdIn
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 2: count calls to methods in Deque and RandomizedQueue
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 3: count calls to methods in StdRandom
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 4: Time main() with k = 5, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.08
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.01
=> passed       32000     0.02
=> passed       64000     0.03
=> passed      128000     0.06
=> passed      256000     0.09
=> passed      512000     0.16
==> 10/10 tests passed


Test 5: Time main() with k = 1000, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.01
=> passed       32000     0.01
=> passed       64000     0.02
=> passed      128000     0.04
=> passed      256000     0.08
=> passed      512000     0.34
==> 10/10 tests passed


Total: 23/23 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==> passed

Test 2: check that the maximum size of any Deque or RandomizedQueue object
        created is between k and n
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==> passed

Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, n = 138653, k = 5
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 500
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 5000
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50000
    - max size of RandomizedQueue object = 138653

==> FAILED

Total: 2/2 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a Deque
containing n items is 48n + 192.

Running 48 total tests.

Test 1a-1i: total memory usage after inserting n items,
            where n is a power of 2

                 n        bytes
----------------------------------------------------------
=> passed       32          600         
=> passed       64         1112         
=> passed      128         2136         
=> passed      256         4184         
=> passed      512         8280         
=> passed     1024        16472         
=> passed     2048        32856         
=> passed     4096        65624         
=> passed     8192       131160         
==> 9/9 tests passed

Memory: 16.00 n + 88.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33          600         
=> passed       65         1112         
=> passed      129         2136         
=> passed      257         4184         
=> passed      513         8280         
=> passed     1025        16472         
=> passed     2049        32856         
=> passed     4097        65624         
=> passed     8193       131160         
==> 9/9 tests passed

Memory: 16.00 n + 72.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> FAILED       33          152   (0.6x)
=> FAILED       65          152   (0.3x)
=> FAILED      129          152   (0.1x)
=> FAILED      257          152   (0.1x)
=> FAILED      513          152   (0.0x)
=> FAILED     1025          152   (0.0x)
=> FAILED     2049          152   (0.0x)
=> FAILED     4097          152   (0.0x)
=> FAILED     8193          152   (0.0x)
==> 0/9 tests passed

Memory: 152.00   (R^2 = 1.000)


Test 4a-4e: Total memory usage after inserting n items,
            and then deleting all but one item
            (should not grow with n or be too large of a constant).

                 n        bytes
----------------------------------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2

    Deque.removeFirst(Deque.java:224)
    MemoryOfDeque.test4(MemoryOfDeque.java:272)
    MemoryOfDeque.main(MemoryOfDeque.java:658)

Test 5a-5e: Total memory usage of iterator after inserting n items
            (should not grow with n or be too large of a constant).

                 n        bytes
----------------------------------------------------------
=> passed       32           32         
=> passed       64           32         
=> passed      128           32         
=> passed      256           32         
=> passed      512           32         
=> passed     1024           32         
=> passed     2048           32         
=> passed     4096           32         
=> passed     8192           32         
==> 9/9 tests passed

Memory: 32.00   (R^2 = 1.000)


Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively.
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)

    java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2

    Deque.removeFirst(Deque.java:224)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:371)
    MemoryOfDeque.test6a(MemoryOfDeque.java:424)
    MemoryOfDeque.main(MemoryOfDeque.java:660)

  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 4

    Deque.removeLast(Deque.java:253)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:372)
    MemoryOfDeque.test6a(MemoryOfDeque.java:425)
    MemoryOfDeque.main(MemoryOfDeque.java:660)

  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)

    java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2

    Deque.removeFirst(Deque.java:224)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:371)
    MemoryOfDeque.test6a(MemoryOfDeque.java:426)
    MemoryOfDeque.main(MemoryOfDeque.java:660)

  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 4

    Deque.removeLast(Deque.java:253)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:372)
    MemoryOfDeque.test6a(MemoryOfDeque.java:427)
    MemoryOfDeque.main(MemoryOfDeque.java:660)

  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)

    java.lang.ArrayIndexOutOfBoundsException


==> FAILED

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
    - loitering detected after operation 2 of 100
    - sequence of operations was:
         deque.addFirst("OKSEIYASCI")
         deque.removeFirst()     ==> OKSEIYASCI
    - loitered object(s):
      OKSEIYASCI

  * 100 random operations (0.8, 0.0, 0.0, 0.2)
    - loitering detected after operation 2 of 100
    - sequence of operations was:
         deque.addFirst("XXCVHFBRXS")
         deque.removeLast()      ==> XXCVHFBRXS
    - loitered object(s):
      XXCVHFBRXS

  * 100 random operations (0.0, 0.8, 0.2, 0.0)
    - loitering detected after operation 4 of 100
    - sequence of operations was:
         deque.addLast("BWTLAKNUXA")
         deque.addLast("AEMEMZDPXF")
         deque.addLast("WUUYQMGAYX")
         deque.removeFirst()     ==> BWTLAKNUXA
    - loitered object(s):
      BWTLAKNUXA

  * 100 random operations (0.0, 0.8, 0.0, 0.2)
    - loitering detected after operation 4 of 100
    - sequence of operations was:
         deque.addLast("SZZSGGEYDO")
         deque.addLast("EUYWMVQEIC")
         deque.addLast("XIVEBEICBX")
         deque.removeLast()      ==> XIVEBEICBX
    - loitered object(s):
      XIVEBEICBX

  * 100 random operations (0.4, 0.4, 0.1, 0.1)
    - loitering detected after operation 11 of 100
    - sequence of operations was:
         deque.addLast("NBBAGSTYHT")
         deque.addFirst("CKNJUFUHRL")
         deque.addLast("EXOPVHOTPQ")
         deque.addFirst("SDVOAOGAUP")
         deque.addLast("WLGDDJUSUG")
         deque.addLast("HKEWGJKFMM")
         deque.addLast("WSNTVIPZGQ")
         deque.addLast("QAIRHWHAII")
         deque.addLast("ZFFZRBTVGO")
         deque.addFirst("KTCMZUIRPO")
         deque.removeFirst()     ==> KTCMZUIRPO
    - loitered object(s):
      KTCMZUIRPO

  * 100 random operations (0.2, 0.2, 0.3, 0.3)
    - loitering detected after operation 5 of 100
    - sequence of operations was:
         deque.addLast("TCKUYMALTD")
         deque.addLast("VEFVTEITXC")
         deque.addFirst("YBDEBMMZXG")
         deque.addFirst("CPMUJFCAIG")
         deque.removeFirst()     ==> CPMUJFCAIG
    - loitered object(s):
      CPMUJFCAIG

==> FAILED

Test 7: worst-case constant memory allocated or de-allocated
        per deque operation?
  * 128 random operations
    - failed on trial 20 of 128
    - when current size of Deque was 12 objects;
    - the call to addLast() caused a change in memory of 128 bytes
    - any change of more than 96 bytes fails the test

  * 256 random operations
    - failed on trial 27 of 256
    - when current size of Deque was 14 objects;
    - the call to addLast() caused a change in memory of 128 bytes
    - any change of more than 96 bytes fails the test

  * 512 random operations
    - failed on trial 31 of 512
    - when current size of Deque was 13 objects;
    - the call to addFirst() caused a change in memory of 128 bytes
    - any change of more than 96 bytes fails the test

==> FAILED


Min observed memory for Deque: 152.00   (R^2 = 1.000)
Max observed memory for Deque: 16.00 n + 88.00   (R^2 = 1.000)

Total: 27/48 tests passed!


================================================================



Analyzing memory of RandomizedQueue
*-----------------------------------------------------------
For Tests 1-5, the maximum amount of memory allowed for
a RandomizedQueue containing n items is 48n + 192.

For Test 6, the maximum amount of memory allowed for
a RandomizedQueue iterator over n items is 8n + 72.

Test 1a-1i: Total memory usage after inserting n items
            when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32          576         
=> passed       64         1088         
=> passed      128         2112         
=> passed      256         4160         
=> passed      512         8256         
=> passed     1024        16448         
=> passed     2048        32832         
=> passed     4096        65600         
=> passed     8192       131136         
==> 9/9 tests passed

Memory: 16.00 n + 64.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33          576         
=> passed       65         1088         
=> passed      129         2112         
=> passed      257         4160         
=> passed      513         8256         
=> passed     1025        16448         
=> passed     2049        32832         
=> passed     4097        65600         
=> passed     8193       131136         
==> 9/9 tests passed

Memory: 16.00 n + 48.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1088         
=> passed       65         2112         
=> passed      129         4160         
=> passed      257         8256         
=> passed      513        16448         
=> passed     1025        32832         
=> passed     2049        65600         
=> passed     4097       131136         
=> passed     8193       262208         
==> 9/9 tests passed

Memory: 32.00 n + 32.00   (R^2 = 1.000)


Test 4a-4i: Total memory usage after inserting n items, deleting n items,
            then inserting n times, when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32          576         
=> passed       64         1088         
=> passed      128         2112         
=> passed      256         4160         
=> passed      512         8256         
=> passed     1024        16448         
=> passed     2048        32832         
=> passed     4096        65600         
=> passed     8192       131136         
==> 9/9 tests passed

Memory: 16.00 n + 64.00   (R^2 = 1.000)


Test 5a-5i: Total memory usage after inserting n items,
            and then deleting all but one item.

                 n        bytes
----------------------------------------------------------
=> passed       32           80         
=> passed       64           80         
=> passed      128           80         
=> passed      256           80         
=> passed      512           80         
=> passed     1024           80         
=> passed     2048           80         
=> passed     4096           80         
=> passed     8192           80         
==> 9/9 tests passed

Memory: 80.00   (R^2 = 1.000)


Test 6a-6i: Total memory usage of iterator after inserting n items.

                 n        bytes
----------------------------------------------------------
=> passed       32          328         
=> passed       64          584         
=> passed      128         1096         
=> passed      256         2120         
=> passed      512         4168         
=> passed     1024         8264         
=> passed     2048        16456         
=> passed     4096        32840         
=> passed     8192        65608         
==> 9/9 tests passed

Memory: 8.00 n + 72.00   (R^2 = 1.000)


Test 7a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 22

==> FAILED

Test 7b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
    - loitering detected after operation 5 of 200
    - sequence of operations was:
         rq.enqueue("TMNGLTKQIQ")
         rq.enqueue("HCSSYAWXZI")
         rq.enqueue("YAJPIYAPAA")
         rq.enqueue("NEKHYVFSQB")
         rq.dequeue()     ==> "YAJPIYAPAA"
    - loitered object(s):
      YAJPIYAPAA

  * 200 random operations (0.2, 0.8, 0.0)
    - loitering detected after operation 2 of 200
    - sequence of operations was:
         rq.enqueue("DDGLACPJLJ")
         rq.dequeue()     ==> "DDGLACPJLJ"
    - loitered object(s):
      DDGLACPJLJ

  * 200 random operations (0.6, 0.2, 0.2)
    - loitering detected after operation 6 of 200
    - sequence of operations was:
         rq.enqueue("CPVPVYRFCI")
         rq.enqueue("WCGTOUTRVI")
         rq.sample()      ==> "WCGTOUTRVI"
         rq.enqueue("JMSMLUUXFL")
         rq.enqueue("SOOAOLBAHE")
         rq.dequeue()     ==> "JMSMLUUXFL"
    - loitered object(s):
      JMSMLUUXFL

  * 200 random operations (0.2, 0.4, 0.4)
    - loitering detected after operation 3 of 200
    - sequence of operations was:
         rq.enqueue("DYYAJREQDT")
         rq.sample()      ==> "DYYAJREQDT"
         rq.dequeue()     ==> "DYYAJREQDT"
    - loitered object(s):
      DYYAJREQDT

==> FAILED

Test 8: Insert T items into queue; then iterate over queue and check
        that worst-case constant memory is allocated or deallocated
        per iterator operation.
  * T = 64
  * T = 128
  * T = 256
==> passed

Test 9: Total memory usage after inserting n items, seeking to identify
        values of n where memory usage is minimized as a function of n.

                 n        bytes
----------------------------------------------------------
=> passed        7          128         
=> passed       15          192         
=> passed       31          320         
=> passed       63          576         
=> passed      127         1088         
=> passed      255         2112         
=> passed      511         4160         
=> passed     1023         8256         
=> passed     2047        16448         
=> passed        8          192         
=> passed       16          320         
=> passed       32          576         
=> passed       64         1088         
=> passed      128         2112         
=> passed      256         4160         
=> passed      512         8256         
=> passed     1024        16448         
=> passed     2048        32832         
==> 18/18 tests passed

Memory: 0.01 n^2 + 10.20 n + 128.29   (R^2 = 0.858)


Test 10: Total memory usage after inserting 4096 items, then successively
         deleting items, seeking values of n where memory usage is maximized
         as a function of n

                 n        bytes
----------------------------------------------------------
=> passed     2049        65600         
=> passed     1025        32832         
=> passed      513        16448         
=> passed      257         8256         
=> passed      129         4160         
=> passed       65         2112         
=> passed       33         1088         
=> passed       17          576         
=> passed        9          320         
==> 9/9 tests passed

Memory: 32.00 n + 32.00   (R^2 = 1.000)


Min observed memory for RandomizedQueue: 16.00 n + 48.00   (R^2 = 1.000)
Max observed memory for RandomizedQueue: 0.01 n^2 + 10.20 n + 128.29   (R^2 = 0.858)

Running 84 total tests.

Total: 82/84 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 103 total tests.

Test 1a-1k: make n calls to addFirst() followed by n calls to removeFirst()
                    n  seconds
----------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2

    Deque.removeFirst(Deque.java:224)
    TimeDeque.timeAddRemove(TimeDeque.java:25)
    TimeDeque.timeAddRemove(TimeDeque.java:46)
    TimeDeque.test1(TimeDeque.java:220)
    TimeDeque.main(TimeDeque.java:366)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/11 tests passed


Test 2a-2k: make n calls to addLast() followed by n calls to removeLast()
                    n  seconds
----------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2

    Deque.removeFirst(Deque.java:224)
    TimeDeque.timeAddRemove(TimeDeque.java:25)
    TimeDeque.timeAddRemove(TimeDeque.java:46)
    TimeDeque.test2(TimeDeque.java:226)
    TimeDeque.main(TimeDeque.java:369)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/11 tests passed


Test 3a-3k: make n calls to addFirst() followed by n calls to removeLast()
                    n  seconds
----------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2

    Deque.removeFirst(Deque.java:224)
    TimeDeque.timeAddRemove(TimeDeque.java:25)
    TimeDeque.timeAddRemove(TimeDeque.java:46)
    TimeDeque.test3(TimeDeque.java:232)
    TimeDeque.main(TimeDeque.java:372)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/11 tests passed


Test 4a-4k: make n calls to addLast() followed by n calls to removeFirst()
                    n  seconds
----------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2

    Deque.removeFirst(Deque.java:224)
    TimeDeque.timeAddRemove(TimeDeque.java:25)
    TimeDeque.timeAddRemove(TimeDeque.java:46)
    TimeDeque.test4(TimeDeque.java:238)
    TimeDeque.main(TimeDeque.java:375)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/11 tests passed


Test 5a-5g: make n random calls to addFirst(), removeFirst(), isEmpty(), and size()
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.02
=> passed       16384     0.07
=> passed       32768     0.36
=> FAILED       65536     1.43
   [ Most likely one of your operations is not constant time. ]

==> 6/12 tests passed


Test 6a-6g: make n random calls to addLast(), removeLast(), isEmpty(), and size(),
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.02
=> passed        8192     0.02
=> passed       16384     0.08
=> passed       32768     0.34
=> FAILED       65536     1.39
   [ Most likely one of your operations is not constant time. ]

==> 6/12 tests passed


Test 7a-7g: make n random calls to addFirst(), addLast(), removeFirst(), removeLast(),
            isEmpty(), and size() with probabilities (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 512

    Deque.addFirst(Deque.java:161)
    TimeDeque.timeRandomOperations(TimeDeque.java:85)
    TimeDeque.timeRandomOperations(TimeDeque.java:191)
    TimeDeque.test7(TimeDeque.java:277)
    TimeDeque.main(TimeDeque.java:384)

=> FAILED        2048   Test did not complete due to an exception.

==> 1/12 tests passed


Test 8a-8g: make n calls to addFirst(); iterate over the n items by calling
            next() and hasNext()

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.01
=> passed        8192     0.05
=> passed       16384     0.22
=> passed       32768     0.66
=> FAILED       65536     2.82
   [ Most likely one of your operations is not constant time. ]

==> 6/12 tests passed


Test 9a-9k: make n calls to addFirst()/addLast(); interleave n calls each to
            removeFirst(), removeLast(), addFirst(), and addLast()

                    n  seconds
----------------------------------
=> passed        1025     0.00
=> passed        2049     0.00
=> passed        4097     0.01
=> passed        8193     0.03
=> passed       16385     0.11
=> passed       32769     0.52
=> FAILED       65537     2.06
   [ Most likely one of your operations is not constant time. ]

==> 6/11 tests passed

Total: 25/103 tests passed!


================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 67 total tests.

Test 1: make n calls to enqueue() followed by n calls to dequeue();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 2: make n calls to enqueue() follwed by n calls to sample();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 3: make n calls to enqueue() and iterate over the n items;
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 4a-k: make n calls to enqueue() followed by n calls to dequeue()

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.01
=> passed      512000     0.03
=> passed     1024000     0.22
==> 11/11 tests passed


Test 5a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.2, 0.2, 0.2, 0.2, 0.2)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.02
=> passed      512000     0.05
=> passed     1024000     0.10
==> 11/11 tests passed


Test 6a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.6, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.02
=> passed      512000     0.05
=> passed     1024000     0.11
==> 11/11 tests passed


Test 7a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.1, 0.1, 0.6, 0.1, 0.1)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.02
=> passed      512000     0.06
=> passed     1024000     0.13
==> 11/11 tests passed


Test 8a-k: make n calls to enqueue() followed by n calls each to
           next() and hasNext().

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.02
=> passed      512000     0.04
=> passed     1024000     0.09
==> 11/11 tests passed


Test 9a-i: make 100 calls to enqueue; 99 calls to dequeue;
           n calls to enqueue(); then call dequeue() three times,
           followed by enqueue() three times, and repeat n times.

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.02
=> passed      256000     0.05
==> 9/9 tests passed


Total: 67/67 tests passed!


================================================================




See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (5 warnings)
Checkstyle:   FAILED (0 errors, 20 warnings)

Correctness:  31/35 tests passed
Memory:       16/16 tests passed
Timing:       41/42 tests passed

Aggregate score: 92.67%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 11K Jul 16 19:28 KdTree.java
2.0K Jul 16 19:28 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D CFS_CONFUSING_FUNCTION_SEMANTICS CFS: Method KdTree$TwoDTree.put(KdTree$TwoDTree$Node, Double, Point2D) returns modified parameter  At KdTree.java:[line 179]
M D UP_UNUSED_PARAMETER UP: Static or private method KdTree$TwoDTree.draw(KdTree$TwoDTree$Node) has unused parameters  At KdTree.java:[line 204]
L D UC_USELESS_CONDITION UC: The condition 'x.color == false' always produces the same result. Either something else was meant or the condition can be removed.  At KdTree.java:[line 165]
L D UC_USELESS_CONDITION UC: The condition 'this.tmpInsert == false' always produces the same result. Either something else was meant or the condition can be removed.  At KdTree.java:[line 138]
L D UC_USELESS_CONDITION UC: The condition 'x.color == false' always produces the same result. Either something else was meant or the condition can be removed.  At KdTree.java:[line 232]
L D UC_USELESS_CONDITION UC: The condition 'x.color == false' always produces the same result. Either something else was meant or the condition can be removed.  At KdTree.java:[line 269]
M D URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD UrF: The public or protected variable 'upperLimit' is never read. Consider removing it from the class.  At KdTree.java:[line 44]
M D URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD UrF: The public or protected variable 'lowerLimit' is never read. Consider removing it from the class.  At KdTree.java:[line 43]


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:12: The private instance (or static) variable 'tree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:187: Avoid unused parameter variables, such as 'x'. [UnusedFormalParameter]
PointSET.java:9: The private instance (or static) variable 'set' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:10: Can you replace the instance (or static) variable 'rangeList' with a local variable? [SingularField]
PointSET.java:82: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 5 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:30:20: Use the primitive type 'double' instead of the wrapper type 'Double'. [Wrapper]
[WARN] KdTree.java:74:37: Use the primitive type 'double' instead of the wrapper type 'Double'. [Wrapper]
[WARN] KdTree.java:117:25: Use the primitive type 'double' instead of the wrapper type 'Double'. [Wrapper]
[WARN] KdTree.java:126:34: Use the primitive type 'double' instead of the wrapper type 'Double'. [Wrapper]
[WARN] KdTree.java:216:51: The local (or parameter) variable 'stack' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] KdTree.java:218:111: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:332:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:333:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] PointSET.java:5:1: Do not use 'java.util.Stack'. Instead, use 'edu.princeton.cs.algs4.Stack'. [IllegalImport]
[WARN] PointSET.java:10:13: Do not use 'java.util.Stack'. Instead, use 'edu.princeton.cs.algs4.Stack'. [IllegalType]
[WARN] PointSET.java:56:21: Do not use 'java.util.Stack'. Instead, use 'edu.princeton.cs.algs4.Stack'. [IllegalInstantiation]
Checkstyle ends with 0 errors and 11 warning.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------
[WARN] PointSET.java:74:19: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] PointSET.java:74:37: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:248:32: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:255:23: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:256:34: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:262:42: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:266:42: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:272:42: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:276:42: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
Checkstyle ends with 0 errors and 7 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.26, 0.83] x [0.85, 0.91]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student kd-tree nodes involved in calls to Point2D methods:
      A (0.26, 0.85) (0.83, 0.91) B D E 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B D E 
    - failed on trial 1 of 1000

  * input10.txt
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.14, 0.26] x [0.25, 0.57]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student kd-tree nodes involved in calls to Point2D methods:
      A (0.14, 0.25) (0.26, 0.57) C D E 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A C D E 
    - failed on trial 1 of 1000

==> FAILED

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0, 1.0] x [0.5, 0.75]
    - sequence of points inserted: 
      A  0.5 0.0
      B  0.25 0.25
      C  0.75 1.0
    - student kd-tree nodes involved in calls to Point2D methods:
      A (0.0, 0.5) (1.0, 0.75) B C 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B C 
    - failed on trial 1 of 1000

  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - student range() returns correct set of points
    - student   range():  C F B E A 
    - reference range():  A E B F C 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0, 1.0] x [0.0, 0.875]
    - sequence of points inserted: 
      A  0.375 0.625
      B  0.625 0.375
      C  0.75 0.75
      D  0.5 1.0
      E  0.125 0.5
      F  0.875 0.25
    - student kd-tree nodes involved in calls to Point2D methods:
      A (0.0, 0.0) (1.0, 0.875) E B F C D 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A E B F C D 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.3125, 0.4375] x [0.125, 0.1875]
    - sequence of points inserted: 
      A  0.5625 0.375
      B  0.25 0.625
      C  0.625 0.6875
      D  0.125 0.75
      E  0.5 0.4375
      F  0.75 0.875
      G  1.0 0.25
      H  0.9375 0.8125
      I  0.875 0.5
      J  0.8125 0.0625
    - student kd-tree nodes involved in calls to Point2D methods:
      A (0.3125, 0.125) (0.4375, 0.1875) B E 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B E 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - student range() returns correct set of points
    - student   range():  R J O H E P M D B S Q K I C A 
    - reference range():  A C I K Q S B D M P E H O J R 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0625, 1.0] x [0.0625, 0.875]
    - sequence of points inserted: 
      A  0.53125 0.5
      B  0.96875 0.40625
      C  0.1875 0.28125
      D  0.625 0.25
      E  0.84375 0.4375
      F  0.40625 0.9375
      G  0.34375 0.90625
      H  0.8125 0.8125
      I  0.28125 0.1875
      J  0.875 0.75
      K  0.09375 0.53125
      L  0.0 0.21875
      M  0.71875 0.3125
      N  0.125 1.0
      O  0.59375 0.71875
      P  0.75 0.15625
      Q  0.46875 0.78125
      R  0.90625 0.59375
      S  0.4375 0.84375
      T  0.78125 0.96875
    - student kd-tree nodes involved in calls to Point2D methods:
      A (0.0625, 0.0625) (1.0, 0.875) C I L F G K Q S B D M P E H O T J R 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A C I L F G K Q S B D M P E H O T J R 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - student range() returns correct set of points
    - student   range():  K 
    - reference range():  K 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.21875, 0.265625] x [0.078125, 0.890625]
    - number of entries in student   solution: 15
    - number of entries in reference solution: 13
    - 2 extra entries in student solution, including:
      '(0.265625, 0.890625)'

    - failed on trial 1 of 1000

==> FAILED

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.7, 0.2)
    - reference nearest() = (0.7, 0.2)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.97, 0.25)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A E (0.97, 0.6) (0.7, 0.25) B C (0.2, 0.25) (0.97, 0.4) D (0.4, 0.25) 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A E B C 
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.32, 0.708)
    - reference nearest() = (0.32, 0.708)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.54, 0.81)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H I (0.54, 0.725) (0.862, 0.81) (0.54, 0.413) (0.372, 0.81) C F (0.32, 0.81) (0.54, 0.577) D (0.144, 0.81) 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H I C F 
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.375, 0.75)
    - reference nearest() = (0.375, 0.75)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.5, 0.5)
    - sequence of points inserted: 
      A  0.25 0.0
      B  1.0 1.0
      C  0.375 0.75
      D  0.0 0.375
      E  0.75 0.875
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C E (0.5, 0.875) (0.375, 0.5) (0.5, 1.0) (0.25, 0.5) D (0.5, 0.375) 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C E D 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.75, 0.4375)
    - reference nearest() = (0.75, 0.4375)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.6875, 0.3125)
    - sequence of points inserted: 
      A  0.4375 0.375
      B  0.875 0.625
      C  0.0 0.6875
      D  1.0 0.8125
      E  0.9375 0.125
      F  0.5 1.0
      G  0.75 0.4375
      H  0.625 0.5625
      I  0.3125 0.5
      J  0.25 0.1875
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B E G (0.6875, 0.4375) H (0.625, 0.3125) (0.9375, 0.3125) (0.6875, 0.625) (0.4375, 0.3125) 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B E G H 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.75, 0.25)
    - reference nearest() = (0.75, 0.25)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.78125, 0.375)
    - sequence of points inserted: 
      A  0.71875 0.84375
      B  0.8125 0.5625
      C  0.6875 0.75
      D  0.90625 0.625
      E  0.46875 0.0
      F  0.59375 0.5
      G  0.75 0.25
      H  0.125 0.40625
      I  0.34375 0.875
      J  0.21875 0.71875
      K  0.03125 0.9375
      L  0.5625 0.1875
      M  0.65625 0.125
      N  0.375 1.0
      O  0.9375 0.6875
      P  0.5 0.15625
      Q  0.3125 0.65625
      R  0.96875 0.8125
      S  0.4375 0.59375
      T  0.40625 0.90625
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G (0.75, 0.375) (0.78125, 0.5625) (0.71875, 0.375) C E F L M (0.78125, 0.125) (0.5625, 0.375) (0.78125, 0.5) (0.46875, 0.375) (0.78125, 0.75) 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G C E F L M 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.078125, 0.6875)
    - reference nearest() = (0.078125, 0.6875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 18
    - number of reference entries = 9
    - entry 8 of the two sequences are not equal
    - student   entry 8 = (0.109375, 0.796875)
    - reference entry 8 = (0.0, 0.453125)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.09375, 0.3203125)
    - reference nearest() = (0.09375, 0.3203125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 18
    - number of reference entries = 9
    - entry 7 of the two sequences are not equal
    - student   entry 7 = (0.03125, 0.375)
    - reference entry 7 = (0.1328125, 0.734375)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.5625, 0.14794921875)
    - reference nearest() = (0.5625, 0.14794921875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 34
    - number of reference entries = 17
    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
  * range()
==> passed

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 23/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          272                264
=> passed        2          368                360
=> passed        5          656                648
=> passed       10         1136               1128
=> passed       25         2576               2568
=> passed      100         9776               9768
=> passed      400        38576              38568
=> passed      800        76976              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 176.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          240                160
=> passed        2          376                288
=> passed        5          784                672
=> passed       10         1464               1312
=> passed       25         3504               3232
=> passed      100        13704              12832
=> passed      400        54504              51232
=> passed      800       108904             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 136.00 n + 104.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1444206         
=> passed   320000    1811022         
=> passed   640000    1448599         
=> passed  1280000    1477836         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1051362         
=> passed   320000    1016517         
=> passed   640000     835588         
=> passed  1280000     601440         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4631         
=> passed    20000       1663         
=> passed    40000        753         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       6123         
=> passed    20000       1895         
=> passed    40000        852         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    1644710               0.0              22.6              21.6               0.0         
=> passed   320000    1544753               0.0              23.0              22.0               0.0         
=> passed   640000    1251677               0.0              24.5              23.5               0.0         
=> passed  1280000    1028149               0.0              26.6              25.6               0.0         
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000    1310093               9.2               8.8               0.0         
=> passed    20000    1354081               9.8               9.3               0.0         
=> passed    40000    1259970              10.9              10.4               0.0         
=> passed    80000    1178894              11.0              10.5               0.0         
=> passed   160000    1092283              11.6              11.1               0.0         
=> passed   320000     947222              12.5              12.0               0.0         
=> passed   640000     834634              12.8              12.3               0.0         
=> passed  1280000     747031              13.6              13.1               0.0         
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     575761               0.0               0.0             148.0              69.0         
=> passed    20000     610754               0.0               0.0             155.6              80.4         
=> passed    40000     522643               0.0               0.0             185.7              86.0         
=> passed    80000     483250               0.0               0.0             192.6              89.1         
=> passed   160000     401757               0.0               0.0             204.8             103.1         
=> passed   320000     341301               0.0               0.0             190.9              90.1         
=> passed   640000     272347               0.0               0.0             207.0             103.1         
=> FAILED  1280000     257239               0.0               0.0             221.4   (1.1x)     98.2         
==> 7/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000   500395                   0.0                    0.0                    50.4              50.0         
=> passed    20000   627130                   0.0                    0.0                    55.3              54.8         
=> passed    40000   539257                   0.0                    0.0                    64.7              64.3         
=> passed    80000   519497                   0.0                    0.0                    66.4              65.1         
=> passed   160000   445441                   0.0                    0.0                    71.4              71.0         
=> passed   320000   361797                   0.0                    0.0                    74.7              73.4         
=> passed   640000   234657                   0.0                    0.0                    77.5              76.3         
=> passed  1280000   248566                   0.0                    0.0                    85.6              86.0         
==> 8/8 tests passed



Total: 27/28 tests passed!


================================================================



